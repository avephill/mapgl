[{"path":"https://walker-data.com/mapgl/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Kyle Walker Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://walker-data.com/mapgl/articles/getting-started.html","id":"using-mapbox-gl-js","dir":"Articles","previous_headings":"","what":"Using Mapbox GL JS","title":"Getting started with mapgl","text":"gateway Mapbox GL JS v3 R mapboxgl() function. Run function arguments get interactive globe using Mapbox’s Standard style: use Mapbox maps, need Mapbox access token. user mapboxapi package installed Mapbox access token, mapboxgl() pick token . new R packages, ’ll want get token Mapbox account, run usethis::edit_r_environ(), set environment variable MAPBOX_PUBLIC_TOKEN=\"your_token_here\". ’s important know Mapbox GL JS commercial product charges map views; however, generous free tier. Mapbox’s default styles accessible mapbox_style() function, can passed style parameter change style map. Mapbox GL JS also supports modifying map projections; use projection = \"winkelTripel\" Winkel Tripel global projection. get local view map, can use center, zoom, pitch, bearing arguments. example shown , arguments incorporated “fly ” animation. mapgl supports several animated transitions. Mapbox GL JS v3, new Standard style includes custom-rendered buildings around world, American Airlines Center Dallas.","code":"library(mapgl)  mapboxgl() mapboxgl(   style = mapbox_style(\"satellite\"),   projection = \"winkelTripel\") mapboxgl(   center = c(-97.6, 25.4) ) |>    fly_to(     center = c(-96.810481, 32.790869),     zoom = 18.4,     pitch = 75,     bearing = 136.8   )"},{"path":"https://walker-data.com/mapgl/articles/getting-started.html","id":"using-maplibre-gl-js","dir":"Articles","previous_headings":"","what":"Using Maplibre GL JS","title":"Getting started with mapgl","text":"Maplibre GL JS, fork permissively-licensed Mapbox GL JS 1.0, also available R users mapgl. core function initialize MapLibre map maplibre(). default tiles maplibre() CARTO’s Voyager tiles, usable without API key. MapTiler tiles also available via maptiler_style() function. styles work quite well MapLibre, require API key; set environment variable MAPTILER_API_KEY .Renviron file store key. example uses Bright MapTiler style, adds fullscreen control navigation control map. controls styles available mapboxgl() well; mapgl aims provide consistent API work either Mapbox MapLibre.","code":"library(mapgl)  maplibre() maplibre(   style = maptiler_style(\"bright\"),   center = c(-43.23412, -22.91370),   zoom = 14 ) |>    add_fullscreen_control(position = \"top-left\") |>    add_navigation_control()"},{"path":"https://walker-data.com/mapgl/articles/getting-started.html","id":"comparing-map-views","dir":"Articles","previous_headings":"","what":"Comparing map views","title":"Getting started with mapgl","text":"mapgl includes function compare() allows users create synced swipe maps can compare two styles. function works either Mapbox MapLibre maps. don’t working correctly rendered R Markdown / Quarto docs Shiny apps yet, ’m working !","code":"m1 <- mapboxgl() m2 <- mapboxgl(mapbox_style(\"satellite-streets\"))  compare(m1, m2)"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"using-layers-an-overview","dir":"Articles","previous_headings":"","what":"Using layers: an overview","title":"Layers overview","text":"Mapbox GL JS MapLibre, datasets added maps sources styled layers. mapgl aims expose sources layers APIs R users ways honor deep customization available JavaScript libraries also accommodate R users’ typical workflows. Geospatial practitioners R typically work objects sf package. initial release mapgl natively supports sf objects, aim support geospatial formats (objects terra package) future. Objects class sf can specified sources map either add_source() function via source parameter one mapgl’s layer functions. add_fill_layer() function calls Mapbox GL JS addLayer() function internally fill type, enumerates available options styling layer function arguments. mapgl users often want use bounds argument initializing map, alternatively fit_bounds() function, fix map view given layer’s bounding box. overview available layers mapgl . Layers can used either mapboxgl() maplibre() maps.","code":"library(mapgl) library(sf)  nc <- st_read(system.file(\"shape/nc.shp\", package=\"sf\")) ## Reading layer `nc' from data source  ##   `/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/sf/shape/nc.shp'  ##   using driver `ESRI Shapefile' ## Simple feature collection with 100 features and 14 fields ## Geometry type: MULTIPOLYGON ## Dimension:     XY ## Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 ## Geodetic CRS:  NAD27 mapboxgl(bounds = nc) |>    add_fill_layer(id = \"nc_data\",                  source = nc,                  fill_color = \"blue\",                  fill_opacity = 0.5)"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"line-layers","dir":"Articles","previous_headings":"","what":"Line layers","title":"Layers overview","text":"","code":"library(mapgl) library(tigris) ## To enable caching of data, set `options(tigris_use_cache = TRUE)` ## in your R script or .Rprofile. options(tigris_use_cache = TRUE)  loving_roads <- roads(\"TX\", \"Loving\")  maplibre(style = maptiler_style(\"backdrop\"),          bounds = loving_roads) |>   add_line_layer(     id = \"roads\",     source = loving_roads,     line_color = \"navy\",     line_opacity = 0.7   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"circle-layers","dir":"Articles","previous_headings":"","what":"Circle layers","title":"Layers overview","text":"Circle layers typically used represent point data map. Circle clustering implemented cluster_options argument, list generated cluster_options() function can passed.","code":"library(mapgl) library(sf) library(dplyr)  # Set seed for reproducibility set.seed(1234)  # Define the bounding box for Washington DC (approximately) bbox <- st_bbox(c(   xmin = -77.119759,   ymin = 38.791645,   xmax = -76.909393,   ymax = 38.995548 ), crs = st_crs(4326))  # Generate 30 random points within the bounding box random_points <- st_as_sf(   data.frame(     id = 1:30,     lon = runif(30, bbox[\"xmin\"], bbox[\"xmax\"]),     lat = runif(30, bbox[\"ymin\"], bbox[\"ymax\"])   ),   coords = c(\"lon\", \"lat\"),   crs = 4326 )  # Assign random categories categories <- c('music', 'bar', 'theatre', 'bicycle') random_points <- random_points %>%   mutate(category = sample(categories, n(), replace = TRUE))  # Map with circle layer mapboxgl(style = mapbox_style(\"dark\"),          bounds = random_points) %>%   add_circle_layer(     id = \"poi-layer\",     source = random_points,     circle_color = match_expr(       \"category\",       values = c(\"music\", \"bar\", \"theatre\",                  \"bicycle\"),       stops = c(\"#1f78b4\", \"#33a02c\",                 \"#e31a1c\", \"#ff7f00\")     ),     circle_radius = 8,     circle_stroke_color = \"#ffffff\",     circle_stroke_width = 2,     circle_opacity = 0.8,     tooltip = \"category\",     hover_options = list(circle_radius = 12,                          circle_color = \"#ffff99\")   ) %>%   add_categorical_legend(     legend_title = \"Points of Interest\",     values = c(\"Music\", \"Bar\", \"Theatre\", \"Bicycle\"),     colors = c(\"#1f78b4\", \"#33a02c\", \"#e31a1c\", \"#ff7f00\"),     circular_patches = TRUE   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"symbol-layers","dir":"Articles","previous_headings":"","what":"Symbol layers","title":"Layers overview","text":"Symbol layers offer wide range arguments customizing icon label appearance; however arguments work icons. icon_image argument look string represents icon found map style’s sprite. Read sprites .","code":"mapboxgl(style = mapbox_style(\"light\"),          bounds = random_points) |>   add_symbol_layer(     id = \"points-of-interest\",     source = random_points,     icon_image = get_column(\"category\"),     icon_allow_overlap = TRUE,     tooltip = \"category\"   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"heatmap-layers","dir":"Articles","previous_headings":"","what":"Heatmap layers","title":"Layers overview","text":"Heatmap layers take object geometry type POINT visualize density points visually attractive way. add_heatmap_layer() takes sf POINT objects; example shows read remote GeoJSON file source well.","code":"library(mapgl)  mapboxgl(style = mapbox_style(\"dark\"),          center = c(-120, 50),          zoom = 2) |>   add_heatmap_layer(     id = \"earthquakes-heat\",     source = list(       type = \"geojson\",       data = \"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"     ),     heatmap_weight = interpolate(       column = \"mag\",       values = c(0, 6),       stops = c(0, 1)     ),     heatmap_intensity = interpolate(       property = \"zoom\",       values = c(0, 9),       stops = c(1, 3)     ),     heatmap_color = interpolate(       property = \"heatmap-density\",       values = seq(0, 1, 0.2),       stops = c('rgba(33,102,172,0)', 'rgb(103,169,207)',                 'rgb(209,229,240)', 'rgb(253,219,199)',                 'rgb(239,138,98)', 'rgb(178,24,43)')     ),     heatmap_opacity = 0.7   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"fill-extrusion-layers","dir":"Articles","previous_headings":"","what":"Fill-extrusion layers","title":"Layers overview","text":"","code":"library(mapgl)  maplibre(   style = maptiler_style(\"basic\"),   center = c(-74.0066, 40.7135),   zoom = 15.5,   pitch = 45,   bearing = -17.6 ) |>   add_vector_source(     id = \"openmaptiles\",     url = paste0(\"https://api.maptiler.com/tiles/v3/tiles.json?key=\",                  Sys.getenv(\"MAPTILER_API_KEY\"))   ) |>   add_fill_extrusion_layer(     id = \"3d-buildings\",     source = 'openmaptiles',     source_layer = 'building',     fill_extrusion_color = interpolate(       column = 'render_height',       values = c(0, 200, 400),       stops = c('lightgray', 'royalblue', 'lightblue')     ),     fill_extrusion_height = list(       'interpolate',       list('linear'),       list('zoom'),       15,       0,       16,       list('get', 'render_height')     )   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"raster-layers","dir":"Articles","previous_headings":"","what":"Raster layers","title":"Layers overview","text":"mapgl supports rasters terra package passed data argument add_image_source() function, visualized add_raster_layer(). Remote raster sources (shown ) can also added add_image_source() remotely-hosted image files, add_raster_source() remotely-hosted raster tiles.","code":"mapboxgl(style = mapbox_style(\"dark\"),          zoom = 5,          center = c(-75.789, 41.874)) |>   add_image_source(     id = \"radar\",     url = \"https://docs.mapbox.com/mapbox-gl-js/assets/radar.gif\",     coordinates = list(       c(-80.425, 46.437),       c(-71.516, 46.437),       c(-71.516, 37.936),       c(-80.425, 37.936)     )   ) |>   add_raster_layer(     id = 'radar-layer',     source = 'radar',     raster_fade_duration = 0   )"},{"path":"https://walker-data.com/mapgl/articles/layers-overview.html","id":"markers","dir":"Articles","previous_headings":"","what":"Markers","title":"Layers overview","text":"Markers represent unique visual component Mapbox GL JS MapLibre GL JS, highlight locations count map layers. mapgl, users can add markers using add_markers() function. single marker can added length-2 vector longitude latitude; list length-2 vectors sf POINT object add multiple markers.","code":"mapboxgl(   style = mapbox_style(\"streets\"),   center = c(-74.006, 40.7128),   zoom = 10 ) |>  add_markers(   c(-74.006, 40.7128),   color = \"blue\",   rotation = 45,   popup = \"A marker\" )"},{"path":"https://walker-data.com/mapgl/articles/map-design.html","id":"continuous-styling","dir":"Articles","previous_headings":"","what":"Continuous styling","title":"Fundamentals of map design with mapgl","text":"Styling Mapbox GL JS Maplibre GL JS typically handled expressions. Expressions allow quite bit customization map-makers, can feel clunky R users. mapgl includes several functions help R users translate code expressions use data visualizations. interpolate() function create interpolate expression, smoothly transitions values series stops. means can natively create just color palette want map palette seamlessly data. , specify two values - 20 80 - map colors “lightblue” “darkblue” values. Mapbox GL JS smoothly interpolate colors light blue dark blue map data values found specified column. add_legend() function adds legend map. mapgl’s initial release, add_legend() automatically populate values style. gives users much flexibility format legend, though users also need take care ensure legend appropriately represents data. Future updates package may include functionality automated legends.","code":"fl_map |>    add_fill_layer(   id = \"fl_tracts\",   source = fl_age,   fill_color = interpolate(     column = \"estimate\",     values = c(20, 80),     stops = c(\"lightblue\", \"darkblue\"),     na_color = \"lightgrey\"   ),   fill_opacity = 0.5  ) |>    add_legend(     \"Median age in Florida\",     values = c(20, 80),     colors = c(\"lightblue\", \"darkblue\")   )"},{"path":"https://walker-data.com/mapgl/articles/map-design.html","id":"categorical-styling","dir":"Articles","previous_headings":"","what":"Categorical styling","title":"Fundamentals of map design with mapgl","text":"Cartographers may prefer binned method visualizing data rather continuous palette shown . Mapbox GL JS MapLibre, binned maps can created step expression. step_expr() function helps R users assemble expression. Step expressions may feel little unfamiliar R users, require base value followed series stops. example , generate five-color palette ColorBrewer. first color used base, four colors stops. values specify bin edges.","code":"brewer_pal <- RColorBrewer::brewer.pal(5, \"RdYlBu\")  fl_map |>    add_fill_layer(   id = \"fl_tracts\",   source = fl_age,   fill_color = step_expr(     column = \"estimate\",     base = brewer_pal[1],     stops = brewer_pal[2:5],     values = seq(25, 70, 15),     na_color = \"white\"   ),   fill_opacity = 0.5  ) |>    add_legend(     \"Median age in Florida\",     values = c(       \"Under 25\",       \"25-40\",       \"40-55\",       \"55-70\",       \"Above 70\"     ),     colors = brewer_pal,     type = \"categorical\"   )"},{"path":"https://walker-data.com/mapgl/articles/map-design.html","id":"pop-ups-tooltips-and-highlighting","dir":"Articles","previous_headings":"","what":"Pop-ups, tooltips, and highlighting","title":"Fundamentals of map design with mapgl","text":"Mapmakers often want expose additional interactivity users form -click popups, hover tooltips, hover effects. native JavaScript, can tricky set requires knowledge events, queries, feature states libraries. mapgl wraps functionality make features accessible R users. popup tooltip arguments take string input representing name column display click hover. arguments accommodate HTML, best way set create column values display popup tooltip, use column adding layer. Hover effects can set hover_options argument. argument takes list key-value pairs keys arguments given layer type (case, fill layer) arguments desired values hover. example shown , tell Mapbox GL JS change Census tract’s fill yellow fill opacity 1 users hovers tract.","code":"fl_age$popup <- glue::glue(   \"<strong>GEOID: <\/strong>{fl_age$GEOID}<br><strong>Median age: <\/strong>{fl_age$estimate}\" )  fl_map |>    add_fill_layer(   id = \"fl_tracts\",   source = fl_age,   fill_color = interpolate(     column = \"estimate\",     values = c(20, 80),     stops = c(\"lightblue\", \"darkblue\"),     na_color = \"lightgrey\"   ),   fill_opacity = 0.5,   popup = \"popup\",   tooltip = \"estimate\",   hover_options = list(     fill_color = \"yellow\",     fill_opacity = 1   )  ) |>    add_legend(     \"Median age in Florida\",     values = c(20, 80),     colors = c(\"lightblue\", \"darkblue\")   )"},{"path":"https://walker-data.com/mapgl/articles/shiny.html","id":"map-inputs","dir":"Articles","previous_headings":"","what":"Map inputs","title":"Using mapgl with Shiny","text":"number map events built-working mapgl Shiny session exposed user inputs. include: input$MAPID_center: center coordinates map (named lng lat); input$MAPID_zoom: current zoom level map; input$MAPID_bbox: bounding box visible extent map, named xmin, xmax, ymin, ymax. input$MAPID_click: longitude latitude click, named lng lat, timestamp click, named time. Visible features map can also queried clicked. Clicking map Shiny returns input$MAPID_feature_click, gets layer ID, column values clicked feature (accessible properties), well coordinates time click. Try example see works:","code":"ui <- page_sidebar(   title = \"mapgl with Shiny\",   sidebar = sidebar(     verbatimTextOutput(\"clicked_feature\")   ),   card(     full_screen = TRUE,     maplibreOutput(\"map\")   ) )  server <- function(input, output, session) {   output$map <- renderMaplibre({     maplibre(style = carto_style(\"positron\")) |>        fit_bounds(nc, animate = FALSE) |>        add_fill_layer(id = \"nc_data\",                      source = nc,                      fill_color = \"blue\",                      fill_opacity = 0.5)   })      output$clicked_feature <- renderPrint({     req(input$map_feature_click)     input$map_feature_click   }) }  shinyApp(ui, server)"},{"path":"https://walker-data.com/mapgl/articles/shiny.html","id":"shiny-specific-functions","dir":"Articles","previous_headings":"","what":"Shiny-specific functions","title":"Using mapgl with Shiny","text":"mapgl includes number functions help interact maps data Shiny session, likely add future. include: set_style(), modify underlying style (basemap) map; set_layout_property(), modify layout property map (whether layer displayed); set_paint_property(), modify styling layer; set_filter(), dynamically filters displayed data layer based input value. ’ll need build filter expressionto achieve ; using list() R translate square brackets JavaScript. plans make easier users future. ’ll use functions combination proxy object, familiar users coming Leaflet R mapping packages. map proxy preserves existing state map, allows edit components without re-drawing entire map app. ’ll use mapboxgl_proxy() Mapbox maps, maplibre_proxy() MapLibre maps. Try example uses color picker widget change color map, slider filter visible counties based expression.","code":"library(colourpicker)  ui <- page_sidebar(   title = \"mapgl with Shiny\",   sidebar = sidebar(     colourInput(\"color\", \"Select a color\",                 value = \"blue\"),     sliderInput(\"slider\", \"Show BIR74 values above:\",                 value = 248, min = 248, max = 21588)   ),   card(     full_screen = TRUE,     maplibreOutput(\"map\")   ) )  server <- function(input, output, session) {   output$map <- renderMaplibre({     maplibre(style = carto_style(\"positron\")) |>        fit_bounds(nc, animate = FALSE) |>        add_fill_layer(id = \"nc_data\",                      source = nc,                      fill_color = \"blue\",                      fill_opacity = 0.5)   })      observeEvent(input$color, {     maplibre_proxy(\"map\") |>       set_paint_property(\"nc_data\", \"fill-color\", input$color)   })      observeEvent(input$slider, {     maplibre_proxy(\"map\") |>        set_filter(\"nc_data\",                   list(\">=\", get_column(\"BIR74\"), input$slider))   }) }  shinyApp(ui, server)"},{"path":"https://walker-data.com/mapgl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Walker. Author, maintainer.","code":""},{"path":"https://walker-data.com/mapgl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Walker K (2024). mapgl: Interactive Maps 'Mapbox GL JS' 'MapLibre GL JS'. R package version 0.1.4, https://walker-data.com/mapgl/.","code":"@Manual{,   title = {mapgl: Interactive Maps with 'Mapbox GL JS' and 'MapLibre GL JS'},   author = {Kyle Walker},   year = {2024},   note = {R package version 0.1.4},   url = {https://walker-data.com/mapgl/}, }"},{"path":"https://walker-data.com/mapgl/index.html","id":"mapgl-","dir":"","previous_headings":"","what":"mapgl: WebGL Maps in R with Mapbox and MapLibre","title":"mapgl: WebGL Maps in R with Mapbox and MapLibre","text":"mapgl R package makes latest versions Mapbox GL JS MapLibre GL JS available R users. package interface designed make powerful capabilities libraries available R mapping projects, also feel similar users coming R mapping packages. Install CRAN: , install development version GitHub: Read vignettes learn use package: Getting started mapgl Using layers: overview Fundamentals map design mapgl Using mapgl Shiny","code":"install.packages(\"mapgl\") remotes::install_github(\"walkerke/mapgl\")"},{"path":"https://walker-data.com/mapgl/index.html","id":"recommended-training-and-how-to-learn-more","dir":"","previous_headings":"","what":"Recommended training and how to learn more","title":"mapgl: WebGL Maps in R with Mapbox and MapLibre","text":"find project useful work like ensure continued development package, can provide support following ways: Purchase official mapgl workshop series, hosted mapgl’s author, Kyle Walker; Chip funds support package development via PayPal; Set consulting engagement workshop though Walker Data help implement mapgl project. Send note kyle@walker-data.com interested; File issue - even better, pull request - https://github.com/walkerke/mapgl/issues. stay top package updates / new features get information mapgl trainings, sure sign Walker Data mailing list .","code":""},{"path":"https://walker-data.com/mapgl/reference/add_categorical_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","title":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","text":"function adds categorical legend Mapbox GL map. supports customizable colors, sizes, shapes legend items.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_categorical_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","text":"","code":"add_categorical_legend(   map,   legend_title,   values,   colors,   circular_patches = FALSE,   position = \"top-left\",   unique_id = NULL,   sizes = NULL,   add = FALSE,   width = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_categorical_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","text":"map map object created mapboxgl function. legend_title title legend. values vector categories values displayed legend. colors corresponding colors values. Can vector colors single color. circular_patches Logical, whether use circular patches legend. Default FALSE. position position legend map. One \"top-left\", \"bottom-left\", \"top-right\", \"bottom-right\". Default \"top-left\". unique_id unique ID legend container. NULL, random ID generated. sizes optional numeric vector sizes legend patches, single numeric value. provided vector, length values. circular_patches FALSE (square patches), sizes represent width height patch pixels.  circular_patches TRUE, sizes represent radius circle. add Logical, whether add legend existing legends (TRUE) replace existing legends (FALSE). Default FALSE. width width legend. Can specified pixels (e.g., \"250px\") \"auto\". Default NULL, uses built-default.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_categorical_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","text":"updated map object legend added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_categorical_legend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a categorical legend to a Mapbox GL map — add_categorical_legend","text":"","code":"if (FALSE) { # \\dontrun{ library(mapboxgl) map <- mapboxgl(     center = c(-96, 37.8),     zoom = 3 ) map %>% add_categorical_legend(     legend_title = \"Population\",     values = c(\"Low\", \"Medium\", \"High\"),     colors = c(\"#FED976\", \"#FEB24C\", \"#FD8D3C\"),     circular_patches = TRUE,     sizes = c(10, 15, 20),     width = \"300px\" ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_circle_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a circle layer to a Mapbox GL map — add_circle_layer","title":"Add a circle layer to a Mapbox GL map — add_circle_layer","text":"Add circle layer Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_circle_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a circle layer to a Mapbox GL map — add_circle_layer","text":"","code":"add_circle_layer(   map,   id,   source,   source_layer = NULL,   circle_blur = NULL,   circle_color = NULL,   circle_opacity = NULL,   circle_radius = NULL,   circle_sort_key = NULL,   circle_stroke_color = NULL,   circle_stroke_opacity = NULL,   circle_stroke_width = NULL,   circle_translate = NULL,   circle_translate_anchor = \"map\",   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL,   cluster_options = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_circle_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a circle layer to a Mapbox GL map — add_circle_layer","text":"map map object created mapboxgl function. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). circle_blur Amount blur circle. circle_color color circle. circle_opacity opacity circle drawn. circle_radius Circle radius. circle_sort_key Sorts features ascending order based value. circle_stroke_color color circle's stroke. circle_stroke_opacity opacity circle's stroke. circle_stroke_width width circle's stroke. circle_translate geometry's offset. Values c(x, y) negatives indicate left . circle_translate_anchor Controls frame reference circle-translate. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click.  Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer. cluster_options list options clustering circles, created cluster_options() function.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_circle_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a circle layer to a Mapbox GL map — add_circle_layer","text":"modified map object new circle layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_circle_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a circle layer to a Mapbox GL map — add_circle_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl) library(sf) library(dplyr)  # Set seed for reproducibility set.seed(1234)  # Define the bounding box for Washington DC (approximately) bbox <- st_bbox(     c(         xmin = -77.119759,         ymin = 38.791645,         xmax = -76.909393,         ymax = 38.995548     ),     crs = st_crs(4326) )  # Generate 30 random points within the bounding box random_points <- st_as_sf(     data.frame(         id = 1:30,         lon = runif(30, bbox[\"xmin\"], bbox[\"xmax\"]),         lat = runif(30, bbox[\"ymin\"], bbox[\"ymax\"])     ),     coords = c(\"lon\", \"lat\"),     crs = 4326 )  # Assign random categories categories <- c(\"music\", \"bar\", \"theatre\", \"bicycle\") random_points <- random_points %>%     mutate(category = sample(categories, n(), replace = TRUE))  # Map with circle layer mapboxgl(style = mapbox_style(\"light\")) %>%     fit_bounds(random_points, animate = FALSE) %>%     add_circle_layer(         id = \"poi-layer\",         source = random_points,         circle_color = match_expr(             \"category\",             values = c(                 \"music\", \"bar\", \"theatre\",                 \"bicycle\"             ),             stops = c(                 \"#1f78b4\", \"#33a02c\",                 \"#e31a1c\", \"#ff7f00\"             )         ),         circle_radius = 8,         circle_stroke_color = \"#ffffff\",         circle_stroke_width = 2,         circle_opacity = 0.8,         tooltip = \"category\",         hover_options = list(             circle_radius = 12,             circle_color = \"#ffff99\"         )     ) %>%     add_categorical_legend(         legend_title = \"Points of Interest\",         values = c(\"Music\", \"Bar\", \"Theatre\", \"Bicycle\"),         colors = c(\"#1f78b4\", \"#33a02c\", \"#e31a1c\", \"#ff7f00\"),         circular_patches = TRUE     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_continuous_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a continuous legend — add_continuous_legend","title":"Add a continuous legend — add_continuous_legend","text":"Add continuous legend","code":""},{"path":"https://walker-data.com/mapgl/reference/add_continuous_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a continuous legend — add_continuous_legend","text":"","code":"add_continuous_legend(   map,   legend_title,   values,   colors,   position = \"top-left\",   unique_id = NULL,   add = FALSE,   width = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_continuous_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a continuous legend — add_continuous_legend","text":"map map object created mapboxgl function. legend_title title legend. values values represented map (vector stops). colors colors used generate color ramp. position position legend map (one \"top-left\", \"bottom-left\", \"top-right\", \"bottom-right\"). unique_id unique ID legend container. Defaults NULL. add Logical, whether add legend existing legends (TRUE) replace existing legends (FALSE). Default FALSE. width width legend. Can specified pixels (e.g., \"250px\") \"auto\". Default NULL, uses built-default.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_continuous_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a continuous legend — add_continuous_legend","text":"updated map object legend added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_draw_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a draw control to a map — add_draw_control","title":"Add a draw control to a map — add_draw_control","text":"Add draw control map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_draw_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a draw control to a map — add_draw_control","text":"","code":"add_draw_control(   map,   position = \"top-left\",   freehand = FALSE,   simplify_freehand = FALSE,   orientation = \"vertical\",   ... )"},{"path":"https://walker-data.com/mapgl/reference/add_draw_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a draw control to a map — add_draw_control","text":"map map object created mapboxgl maplibre functions. position string specifying position draw control. One \"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\". freehand Logical, whether enable freehand drawing mode. Default FALSE. simplify_freehand Logical, whether apply simplification freehand drawings. Default FALSE. orientation string specifying orientation draw control. Either \"vertical\" (default) \"horizontal\". ... Additional named arguments. See https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#options list options.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_draw_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a draw control to a map — add_draw_control","text":"modified map object draw control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_draw_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a draw control to a map — add_draw_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl(     style = mapbox_style(\"streets\"),     center = c(-74.50, 40),     zoom = 9 ) |>     add_draw_control(position = \"top-left\", freehand = TRUE, simplify_freehand = TRUE, orientation = \"horizontal\") } # }"},{"path":"https://walker-data.com/mapgl/reference/add_fill_extrusion_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","title":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","text":"Add fill-extrusion layer Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_extrusion_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","text":"","code":"add_fill_extrusion_layer(   map,   id,   source,   source_layer = NULL,   fill_extrusion_base = NULL,   fill_extrusion_color = NULL,   fill_extrusion_height = NULL,   fill_extrusion_opacity = NULL,   fill_extrusion_pattern = NULL,   fill_extrusion_translate = NULL,   fill_extrusion_translate_anchor = \"map\",   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_fill_extrusion_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","text":"map map object created mapboxgl function. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). fill_extrusion_base base height fill extrusion. fill_extrusion_color color fill extrusion. fill_extrusion_height height fill extrusion. fill_extrusion_opacity opacity fill extrusion. fill_extrusion_pattern Name image sprite use drawing image fills. fill_extrusion_translate geometry's offset. Values c(x, y) negatives indicate left . fill_extrusion_translate_anchor Controls frame reference fill-extrusion-translate. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click.  Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_extrusion_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","text":"modified map object new fill-extrusion layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_extrusion_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a fill-extrusion layer to a Mapbox GL map — add_fill_extrusion_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  maplibre(     style = maptiler_style(\"basic\"),     center = c(-74.0066, 40.7135),     zoom = 15.5,     pitch = 45,     bearing = -17.6 ) |>     add_vector_source(         id = \"openmaptiles\",         url = paste0(             \"https://api.maptiler.com/tiles/v3/tiles.json?key=\",             Sys.getenv(\"MAPTILER_API_KEY\")         )     ) |>     add_fill_extrusion_layer(         id = \"3d-buildings\",         source = \"openmaptiles\",         source_layer = \"building\",         fill_extrusion_color = interpolate(             column = \"render_height\",             values = c(0, 200, 400),             stops = c(\"lightgray\", \"royalblue\", \"lightblue\")         ),         fill_extrusion_height = list(             \"interpolate\",             list(\"linear\"),             list(\"zoom\"),             15,             0,             16,             list(\"get\", \"render_height\")         )     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_fill_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a fill layer to a map — add_fill_layer","title":"Add a fill layer to a map — add_fill_layer","text":"Add fill layer map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a fill layer to a map — add_fill_layer","text":"","code":"add_fill_layer(   map,   id,   source,   source_layer = NULL,   fill_antialias = TRUE,   fill_color = NULL,   fill_emissive_strength = NULL,   fill_opacity = NULL,   fill_outline_color = NULL,   fill_pattern = NULL,   fill_sort_key = NULL,   fill_translate = NULL,   fill_translate_anchor = \"map\",   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_fill_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a fill layer to a map — add_fill_layer","text":"map map object created mapboxgl maplibre functions. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). fill_antialias Whether fill antialiased. fill_color color filled part layer. fill_emissive_strength Controls intensity light emitted source features. fill_opacity opacity entire fill layer. fill_outline_color outline color fill. fill_pattern Name image sprite use drawing image fills. fill_sort_key Sorts features ascending order based value. fill_translate geometry's offset. Values c(x, y) negatives indicate left . fill_translate_anchor Controls frame reference fill-translate. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click.  Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a fill layer to a map — add_fill_layer","text":"modified map object new fill layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fill_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a fill layer to a map — add_fill_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus)  fl_age <- get_acs(     geography = \"tract\",     variables = \"B01002_001\",     state = \"FL\",     year = 2022,     geometry = TRUE )  mapboxgl() |>     fit_bounds(fl_age, animate = FALSE) |>     add_fill_layer(         id = \"fl_tracts\",         source = fl_age,         fill_color = interpolate(             column = \"estimate\",             values = c(20, 80),             stops = c(\"lightblue\", \"darkblue\"),             na_color = \"lightgrey\"         ),         fill_opacity = 0.5     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_fullscreen_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a fullscreen control to a map — add_fullscreen_control","title":"Add a fullscreen control to a map — add_fullscreen_control","text":"Add fullscreen control map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fullscreen_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a fullscreen control to a map — add_fullscreen_control","text":"","code":"add_fullscreen_control(map, position = \"top-right\")"},{"path":"https://walker-data.com/mapgl/reference/add_fullscreen_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a fullscreen control to a map — add_fullscreen_control","text":"map map object created mapboxgl maplibre functions. position string specifying position fullscreen control. One \"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\".","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fullscreen_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a fullscreen control to a map — add_fullscreen_control","text":"modified map object fullscreen control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_fullscreen_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a fullscreen control to a map — add_fullscreen_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  maplibre(     style = maptiler_style(\"streets\"),     center = c(11.255, 43.77),     zoom = 13 ) |>     add_fullscreen_control(position = \"top-right\") } # }"},{"path":"https://walker-data.com/mapgl/reference/add_geocoder_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a geocoder control to a map — add_geocoder_control","title":"Add a geocoder control to a map — add_geocoder_control","text":"function adds Geocoder search bar Mapbox GL MapLibre GL map. default, marker added selected location map fly location.  results geocode accessible Shiny session input$MAPID_geocoder$result, MAPID name map.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_geocoder_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a geocoder control to a map — add_geocoder_control","text":"","code":"add_geocoder_control(   map,   position = \"top-right\",   placeholder = \"Search\",   collapsed = FALSE,   ... )"},{"path":"https://walker-data.com/mapgl/reference/add_geocoder_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a geocoder control to a map — add_geocoder_control","text":"map map object created mapboxgl maplibre function. position position control. Can one \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\". Default \"top-right\". placeholder string use placeholder text search bar. Default \"Search\". collapsed Whether control collapsed hovered clicked. Default FALSE. ... Additional parameters pass Geocoder.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_geocoder_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a geocoder control to a map — add_geocoder_control","text":"modified map object geocoder control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_geocoder_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a geocoder control to a map — add_geocoder_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl() |>     add_geocoder_control(position = \"top-left\", placeholder = \"Enter an address\")  maplibre() |>     add_geocoder_control(position = \"top-right\", placeholder = \"Search location\") } # }"},{"path":"https://walker-data.com/mapgl/reference/add_heatmap_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","title":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","text":"Add heatmap layer Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_heatmap_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","text":"","code":"add_heatmap_layer(   map,   id,   source,   source_layer = NULL,   heatmap_color = NULL,   heatmap_intensity = NULL,   heatmap_opacity = NULL,   heatmap_radius = NULL,   heatmap_weight = NULL,   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   before_id = NULL,   filter = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_heatmap_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","text":"map map object created mapboxgl function. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). heatmap_color color heatmap points. heatmap_intensity intensity heatmap points. heatmap_opacity opacity heatmap layer. heatmap_radius radius influence individual heatmap point. heatmap_weight weight individual heatmap point. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_heatmap_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","text":"modified map object new heatmap layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_heatmap_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a heatmap layer to a Mapbox GL map — add_heatmap_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl(     style = mapbox_style(\"dark\"),     center = c(-120, 50),     zoom = 2 ) |>     add_heatmap_layer(         id = \"earthquakes-heat\",         source = list(             type = \"geojson\",             data = \"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"         ),         heatmap_weight = interpolate(             column = \"mag\",             values = c(0, 6),             stops = c(0, 1)         ),         heatmap_intensity = interpolate(             property = \"zoom\",             values = c(0, 9),             stops = c(1, 3)         ),         heatmap_color = interpolate(             property = \"heatmap-density\",             values = seq(0, 1, 0.2),             stops = c(                 \"rgba(33,102,172,0)\", \"rgb(103,169,207)\",                 \"rgb(209,229,240)\", \"rgb(253,219,199)\",                 \"rgb(239,138,98)\", \"rgb(178,24,43)\"             )         ),         heatmap_opacity = 0.7     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_image_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an image source to a Mapbox GL or Maplibre GL map — add_image_source","title":"Add an image source to a Mapbox GL or Maplibre GL map — add_image_source","text":"Add image source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_image_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an image source to a Mapbox GL or Maplibre GL map — add_image_source","text":"","code":"add_image_source(   map,   id,   url = NULL,   data = NULL,   coordinates = NULL,   colors = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_image_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an image source to a Mapbox GL or Maplibre GL map — add_image_source","text":"map map object created mapboxgl maplibre function. id unique ID source. url URL pointing image source. data SpatRaster object terra package RasterLayer object. coordinates list coordinates specifying image corners clockwise order: top left, top right, bottom right, bottom left.  SpatRaster RasterLayer objects, extracted . colors vector colors use raster image.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_image_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an image source to a Mapbox GL or Maplibre GL map — add_image_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a layer to a map from a source — add_layer","title":"Add a layer to a map from a source — add_layer","text":"many cases, use add_layer() internal layer-specific functions mapgl. Advanced users want use add_layer() fine-grained control appearance layers.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a layer to a map from a source — add_layer","text":"","code":"add_layer(   map,   id,   type = \"fill\",   source,   source_layer = NULL,   paint = list(),   layout = list(),   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a layer to a map from a source — add_layer","text":"map map object created mapboxgl() maplibre() functions. id unique ID layer. type type layer (e.g., \"fill\", \"line\", \"circle\"). source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). paint list paint properties layer. layout list layout properties layer. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click.  Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a layer to a map from a source — add_layer","text":"modified map object new layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a layer to a map from a source — add_layer","text":"","code":"if (FALSE) { # \\dontrun{ # Load necessary libraries library(mapgl) library(tigris)  # Load geojson data for North Carolina tracts nc_tracts <- tracts(state = \"NC\", cb = TRUE)  # Create a Mapbox GL map map <- mapboxgl(     style = mapbox_style(\"light\"),     center = c(-79.0193, 35.7596),     zoom = 7 )  # Add a source and fill layer for North Carolina tracts map %>%     add_source(         id = \"nc-tracts\",         data = nc_tracts     ) %>%     add_layer(         id = \"nc-layer\",         type = \"fill\",         source = \"nc-tracts\",         paint = list(             \"fill-color\" = \"#888888\",             \"fill-opacity\" = 0.4         )     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_layers_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a layers control to the map — add_layers_control","title":"Add a layers control to the map — add_layers_control","text":"Add layers control map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layers_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a layers control to the map — add_layers_control","text":"","code":"add_layers_control(   map,   position = \"top-left\",   layers = NULL,   collapsible = FALSE )"},{"path":"https://walker-data.com/mapgl/reference/add_layers_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a layers control to the map — add_layers_control","text":"map map object. position position control map (one \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\"). layers vector layer IDs included control. NULL, layers included. collapsible Whether control collapsible.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layers_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a layers control to the map — add_layers_control","text":"modified map object layers control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_layers_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a layers control to the map — add_layers_control","text":"","code":"if (FALSE) { # \\dontrun{ library(tigris) options(tigris_use_cache = TRUE)  rds <- roads(\"TX\", \"Tarrant\") tr <- tracts(\"TX\", \"Tarrant\", cb = TRUE)  maplibre() |>     fit_bounds(rds) |>     add_fill_layer(         id = \"Census tracts\",         source = tr,         fill_color = \"purple\",         fill_opacity = 0.6     ) |>     add_line_layer(         \"Local roads\",         source = rds,         line_color = \"pink\"     ) |>     add_layers_control(collapsible = TRUE) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a legend to a Mapbox GL map — add_legend","title":"Add a legend to a Mapbox GL map — add_legend","text":"Add legend Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a legend to a Mapbox GL map — add_legend","text":"","code":"add_legend(   map,   legend_title,   values,   colors,   type = c(\"continuous\", \"categorical\"),   circular_patches = FALSE,   position = \"top-left\",   sizes = NULL,   add = FALSE,   width = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a legend to a Mapbox GL map — add_legend","text":"map map object created mapboxgl function. legend_title title legend. values values represented map (either vector categories vector stops). colors corresponding colors values (either vector colors, single color, interpolate function). type One \"continuous\" \"categorical\". circular_patches Logical, whether use circular patches legend (categorical legends). position position legend map (one \"top-left\", \"bottom-left\", \"top-right\", \"bottom-right\"). sizes optional numeric vector sizes legend patches, single numeric value (categorical legends). add Logical, whether add legend existing legends (TRUE) replace existing legends (FALSE). Default FALSE. width width legend. Can specified pixels (e.g., \"250px\") \"auto\". Default NULL, uses built-default.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a legend to a Mapbox GL map — add_legend","text":"updated map object legend added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_line_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a line layer to a map — add_line_layer","title":"Add a line layer to a map — add_line_layer","text":"Add line layer map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_line_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a line layer to a map — add_line_layer","text":"","code":"add_line_layer(   map,   id,   source,   source_layer = NULL,   line_blur = NULL,   line_color = NULL,   line_dasharray = NULL,   line_gap_width = NULL,   line_offset = NULL,   line_opacity = NULL,   line_pattern = NULL,   line_sort_key = NULL,   line_translate = NULL,   line_translate_anchor = \"map\",   line_width = NULL,   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_line_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a line layer to a map — add_line_layer","text":"map map object created mapboxgl maplibre functions. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). line_blur Amount blur line. line_color color line drawn. line_dasharray Specifies lengths alternating dashes gaps form dash pattern. line_gap_width width gap dashed line's individual dashes. line_offset line's offset. line_opacity opacity line drawn. line_pattern Name image sprite use drawing image fills. line_sort_key Sorts features ascending order based value. line_translate geometry's offset. Values c(x, y) negatives indicate left . line_translate_anchor Controls frame reference line-translate. line_width Stroke thickness. visibility Whether layer displayed. slot optional slot layer order. available using Mapbox Standard style. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click.  Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels) filter optional filter expression subset features layer.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_line_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a line layer to a map — add_line_layer","text":"modified map object new line layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_line_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a line layer to a map — add_line_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl) library(tigris)  loving_roads <- roads(\"TX\", \"Loving\")  maplibre(style = maptiler_style(\"backdrop\")) |>     fit_bounds(loving_roads) |>     add_line_layer(         id = \"tracks\",         source = loving_roads,         line_color = \"navy\",         line_opacity = 0.7     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","title":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","text":"Add markers Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","text":"","code":"add_markers(   map,   data,   color = \"red\",   rotation = 0,   popup = NULL,   marker_id = NULL,   draggable = FALSE,   ... )"},{"path":"https://walker-data.com/mapgl/reference/add_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","text":"map map object created mapboxgl maplibre functions. data length-2 numeric vector coordinates, list length-2 numeric vectors, sf POINT object. color color marker (default \"red\"). rotation rotation marker (default 0). popup column name popups (data sf object) string single popup (data numeric vector list vectors). marker_id unique ID marker. lists, names inherited list names.  sf objects, column name. draggable boolean indicating marker draggable (default FALSE). ... Additional options passed marker.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","text":"modified map object markers added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_markers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add markers to a Mapbox GL or Maplibre GL map — add_markers","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl) library(sf)  # Create a map object map <- mapboxgl(   style = mapbox_style(\"streets\"),   center = c(-74.006, 40.7128),   zoom = 10 )  # Add a single draggable marker with an ID map <- add_markers(   map,   c(-74.006, 40.7128),   color = \"blue\",   rotation = 45,   popup = \"A marker\",   draggable = TRUE,   marker_id = \"marker1\" )  # Add multiple markers from a named list of coordinates coords_list <- list(marker2 = c(-74.006, 40.7128),                     marker3 = c(-73.935242, 40.730610)) map <- add_markers(   map,   coords_list,   color = \"green\",   popup = \"Multiple markers\",   draggable = TRUE )  # Create an sf POINT object points_sf <- st_as_sf(data.frame(   id = c(\"marker4\", \"marker5\"),   lon = c(-74.006, -73.935242),   lat = c(40.7128, 40.730610) ), coords = c(\"lon\", \"lat\"), crs = 4326) points_sf$popup <- c(\"Point 1\", \"Point 2\")  # Add multiple markers from an sf object with IDs from a column map <- add_markers(   map,   points_sf,   color = \"red\",   popup = \"popup\",   draggable = TRUE,   marker_id = \"id\" ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_navigation_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a navigation control to a map — add_navigation_control","title":"Add a navigation control to a map — add_navigation_control","text":"Add navigation control map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_navigation_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a navigation control to a map — add_navigation_control","text":"","code":"add_navigation_control(   map,   show_compass = TRUE,   show_zoom = TRUE,   visualize_pitch = FALSE,   position = \"top-right\",   orientation = \"vertical\" )"},{"path":"https://walker-data.com/mapgl/reference/add_navigation_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a navigation control to a map — add_navigation_control","text":"map map object created mapboxgl maplibre functions. show_compass Whether show compass button. show_zoom Whether show zoom-zoom-buttons. visualize_pitch Whether visualize pitch rotating X-axis compass. position position map control added. Possible values \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\". orientation orientation navigation control. Can \"vertical\" (default) \"horizontal\".","code":""},{"path":"https://walker-data.com/mapgl/reference/add_navigation_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a navigation control to a map — add_navigation_control","text":"updated map object navigation control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_navigation_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a navigation control to a map — add_navigation_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl() |>     add_navigation_control(visualize_pitch = TRUE) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_raster_dem_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a raster DEM source to a Mapbox GL or Maplibre GL map — add_raster_dem_source","title":"Add a raster DEM source to a Mapbox GL or Maplibre GL map — add_raster_dem_source","text":"Add raster DEM source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_dem_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a raster DEM source to a Mapbox GL or Maplibre GL map — add_raster_dem_source","text":"","code":"add_raster_dem_source(map, id, url, tileSize = 512, maxzoom = NULL)"},{"path":"https://walker-data.com/mapgl/reference/add_raster_dem_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a raster DEM source to a Mapbox GL or Maplibre GL map — add_raster_dem_source","text":"map map object created mapboxgl maplibre function. id unique ID source. url URL pointing raster DEM source. tileSize size raster tiles. maxzoom maximum zoom level raster tiles.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_dem_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a raster DEM source to a Mapbox GL or Maplibre GL map — add_raster_dem_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a raster layer to a Mapbox GL map — add_raster_layer","title":"Add a raster layer to a Mapbox GL map — add_raster_layer","text":"Add raster layer Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a raster layer to a Mapbox GL map — add_raster_layer","text":"","code":"add_raster_layer(   map,   id,   source,   source_layer = NULL,   raster_brightness_max = NULL,   raster_brightness_min = NULL,   raster_contrast = NULL,   raster_fade_duration = NULL,   raster_hue_rotate = NULL,   raster_opacity = NULL,   raster_resampling = NULL,   raster_saturation = NULL,   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   before_id = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_raster_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a raster layer to a Mapbox GL map — add_raster_layer","text":"map map object created mapboxgl function. id unique ID layer. source ID source. source_layer source layer (vector sources). raster_brightness_max maximum brightness image. raster_brightness_min minimum brightness image. raster_contrast Increase reduce brightness image. raster_fade_duration duration fade-/fade-effect. raster_hue_rotate Rotates hues around color wheel. raster_opacity opacity raster drawn. raster_resampling resampling/interpolation method use overscaling. raster_saturation Increase reduce saturation image. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels).","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a raster layer to a Mapbox GL map — add_raster_layer","text":"modified map object new raster layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a raster layer to a Mapbox GL map — add_raster_layer","text":"","code":"if (FALSE) { # \\dontrun{ mapboxgl(     style = mapbox_style(\"dark\"),     zoom = 5,     center = c(-75.789, 41.874) ) |>     add_image_source(         id = \"radar\",         url = \"https://docs.mapbox.com/mapbox-gl-js/assets/radar.gif\",         coordinates = list(             c(-80.425, 46.437),             c(-71.516, 46.437),             c(-71.516, 37.936),             c(-80.425, 37.936)         )     ) |>     add_raster_layer(         id = \"radar-layer\",         source = \"radar\",         raster_fade_duration = 0     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_raster_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a raster tile source to a Mapbox GL or Maplibre GL map — add_raster_source","title":"Add a raster tile source to a Mapbox GL or Maplibre GL map — add_raster_source","text":"Add raster tile source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a raster tile source to a Mapbox GL or Maplibre GL map — add_raster_source","text":"","code":"add_raster_source(   map,   id,   url = NULL,   tiles = NULL,   tileSize = 256,   maxzoom = 22 )"},{"path":"https://walker-data.com/mapgl/reference/add_raster_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a raster tile source to a Mapbox GL or Maplibre GL map — add_raster_source","text":"map map object created mapboxgl maplibre function. id unique ID source. url URL pointing raster tile source. (optional) tiles vector tile URLs raster source. (optional) tileSize size raster tiles. maxzoom maximum zoom level raster tiles.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_raster_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a raster tile source to a Mapbox GL or Maplibre GL map — add_raster_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_reset_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a reset control to a map — add_reset_control","title":"Add a reset control to a map — add_reset_control","text":"function adds reset control Mapbox GL MapLibre GL map. reset control allows users return original zoom level center.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_reset_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a reset control to a map — add_reset_control","text":"","code":"add_reset_control(map, position = \"top-right\", animate = TRUE, duration = NULL)"},{"path":"https://walker-data.com/mapgl/reference/add_reset_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a reset control to a map — add_reset_control","text":"map map object created mapboxgl maplibre functions. position position control. Can one \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\". Default \"top-right\". animate Whether animate transition original map view; defaults TRUE.  FALSE, view \"jump\" original view transition. duration length transition current view original view, specified milliseconds.  argument works animate TRUE.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_reset_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a reset control to a map — add_reset_control","text":"modified map object reset control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_reset_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a reset control to a map — add_reset_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl() |>     add_reset_control(position = \"top-left\") } # }"},{"path":"https://walker-data.com/mapgl/reference/add_scale_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a scale control to a map — add_scale_control","title":"Add a scale control to a map — add_scale_control","text":"function adds scale control Mapbox GL Maplibre GL map.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_scale_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a scale control to a map — add_scale_control","text":"","code":"add_scale_control(   map,   position = \"bottom-left\",   unit = \"metric\",   max_width = 100 )"},{"path":"https://walker-data.com/mapgl/reference/add_scale_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a scale control to a map — add_scale_control","text":"map map object created mapboxgl maplibre functions. position position control. Can one \"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\". Default \"bottom-left\". unit unit scale. Can either \"imperial\", \"metric\", \"nautical\". Default \"metric\". max_width maximum length scale control pixels. Default 100.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_scale_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a scale control to a map — add_scale_control","text":"modified map object scale control added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_scale_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a scale control to a map — add_scale_control","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl() |>     add_scale_control(position = \"bottom-right\", unit = \"imperial\") } # }"},{"path":"https://walker-data.com/mapgl/reference/add_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a GeoJSON or sf source to a Mapbox GL or Maplibre GL map — add_source","title":"Add a GeoJSON or sf source to a Mapbox GL or Maplibre GL map — add_source","text":"Add GeoJSON sf source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a GeoJSON or sf source to a Mapbox GL or Maplibre GL map — add_source","text":"","code":"add_source(map, id, data, ...)"},{"path":"https://walker-data.com/mapgl/reference/add_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a GeoJSON or sf source to a Mapbox GL or Maplibre GL map — add_source","text":"map map object created mapboxgl maplibre function. id unique ID source. data sf object URL pointing remote GeoJSON file. ... Additional arguments passed JavaScript addSource method.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a GeoJSON or sf source to a Mapbox GL or Maplibre GL map — add_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_symbol_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a symbol layer to a map — add_symbol_layer","title":"Add a symbol layer to a map — add_symbol_layer","text":"Add symbol layer map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_symbol_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a symbol layer to a map — add_symbol_layer","text":"","code":"add_symbol_layer(   map,   id,   source,   source_layer = NULL,   icon_allow_overlap = NULL,   icon_anchor = NULL,   icon_color = NULL,   icon_color_brightness_max = NULL,   icon_color_brightness_min = NULL,   icon_color_contrast = NULL,   icon_color_saturation = NULL,   icon_emissive_strength = NULL,   icon_halo_blur = NULL,   icon_halo_color = NULL,   icon_halo_width = NULL,   icon_ignore_placement = NULL,   icon_image = NULL,   icon_image_cross_fade = NULL,   icon_keep_upright = NULL,   icon_offset = NULL,   icon_opacity = NULL,   icon_optional = NULL,   icon_padding = NULL,   icon_pitch_alignment = NULL,   icon_rotate = NULL,   icon_rotation_alignment = NULL,   icon_size = NULL,   icon_text_fit = NULL,   icon_text_fit_padding = NULL,   icon_translate = NULL,   icon_translate_anchor = NULL,   symbol_avoid_edges = NULL,   symbol_placement = NULL,   symbol_sort_key = NULL,   symbol_spacing = NULL,   symbol_z_elevate = NULL,   symbol_z_order = NULL,   text_allow_overlap = NULL,   text_anchor = NULL,   text_color = \"black\",   text_emissive_strength = NULL,   text_field = NULL,   text_font = NULL,   text_halo_blur = NULL,   text_halo_color = NULL,   text_halo_width = NULL,   text_ignore_placement = NULL,   text_justify = NULL,   text_keep_upright = NULL,   text_letter_spacing = NULL,   text_line_height = NULL,   text_max_angle = NULL,   text_max_width = NULL,   text_offset = NULL,   text_opacity = NULL,   text_optional = NULL,   text_padding = NULL,   text_pitch_alignment = NULL,   text_radial_offset = NULL,   text_rotate = NULL,   text_rotation_alignment = NULL,   text_size = NULL,   text_transform = NULL,   text_translate = NULL,   text_translate_anchor = NULL,   text_variable_anchor = NULL,   text_writing_mode = NULL,   visibility = \"visible\",   slot = NULL,   min_zoom = NULL,   max_zoom = NULL,   popup = NULL,   tooltip = NULL,   hover_options = NULL,   before_id = NULL,   filter = NULL,   cluster_options = NULL )"},{"path":"https://walker-data.com/mapgl/reference/add_symbol_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a symbol layer to a map — add_symbol_layer","text":"map map object created mapboxgl maplibre functions. id unique ID layer. source ID source, alternatively sf object (converted GeoJSON source) named list specifies type url remote source. source_layer source layer (vector sources). icon_allow_overlap TRUE, icon visible even collides previously drawn symbols. icon_anchor Part icon placed closest anchor. icon_color color icon.  supported many Mapbox icons; read https://docs.mapbox.com/help/troubleshooting/using-recolorable-images--mapbox-maps/. icon_color_brightness_max maximum brightness icon color. icon_color_brightness_min minimum brightness icon color. icon_color_contrast contrast icon color. icon_color_saturation saturation icon color. icon_emissive_strength strength icon's emissive color. icon_halo_blur blur applied icon's halo. icon_halo_color color icon's halo. icon_halo_width width icon's halo. icon_ignore_placement TRUE, icon visible even collides symbols. icon_image Name image sprite use drawing image background. use values column input dataset, use c('get', 'YOUR_ICON_COLUMN_NAME'). icon_image_cross_fade cross-fade parameter icon image. icon_keep_upright TRUE, icon kept upright. icon_offset Offset distance icon. icon_opacity opacity icon drawn. icon_optional TRUE, icon optional. icon_padding Padding around icon. icon_pitch_alignment Alignment icon respect pitch map. icon_rotate Rotates icon clockwise. icon_rotation_alignment Alignment icon respect map. icon_size size icon. icon_text_fit Scales text fit icon. icon_text_fit_padding Padding text fitting icon. icon_translate offset distance icon. icon_translate_anchor Controls frame reference icon-translate. symbol_avoid_edges TRUE, symbol avoided near edges. symbol_placement Placement symbol map. symbol_sort_key Sorts features ascending order based value. symbol_spacing Spacing symbols. symbol_z_elevate Elevates symbol z-axis. symbol_z_order Orders symbol z-axis. text_allow_overlap TRUE, text visible even collides previously drawn symbols. text_anchor Part text placed closest anchor. text_color color text. text_emissive_strength strength text's emissive color. text_field Value use text label. text_font Font stack use displaying text. text_halo_blur blur applied text's halo. text_halo_color color text's halo. text_halo_width width text's halo. text_ignore_placement TRUE, text visible even collides symbols. text_justify justification text. text_keep_upright TRUE, text kept upright. text_letter_spacing Spacing text letters. text_line_height Height text lines. text_max_angle Maximum angle text. text_max_width Maximum width text. text_offset Offset distance text. text_opacity opacity text drawn. text_optional TRUE, text optional. text_padding Padding around text. text_pitch_alignment Alignment text respect pitch map. text_radial_offset Radial offset text. text_rotate Rotates text clockwise. text_rotation_alignment Alignment text respect map. text_size size text. text_transform Transform applied text. text_translate offset distance text. text_translate_anchor Controls frame reference text-translate. text_variable_anchor Variable anchor text. text_writing_mode Writing mode text. visibility Whether layer displayed. slot optional slot layer order. min_zoom minimum zoom level layer. max_zoom maximum zoom level layer. popup column name containing information display popup click. Columns containing HTML parsed. tooltip column name containing information display tooltip hover. Columns containing HTML parsed. hover_options named list options highlighting features layer hover. elements SVG icons can styled. before_id name layer layer appears \"\", allowing insert layers layers basemap (e.g. labels). filter optional filter expression subset features layer. cluster_options list options clustering symbols, created cluster_options() function.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_symbol_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a symbol layer to a map — add_symbol_layer","text":"modified map object new symbol layer added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_symbol_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a symbol layer to a map — add_symbol_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl) library(sf) library(dplyr)  # Set seed for reproducibility set.seed(1234)  # Define the bounding box for Washington DC (approximately) bbox <- st_bbox(     c(         xmin = -77.119759,         ymin = 38.791645,         xmax = -76.909393,         ymax = 38.995548     ),     crs = st_crs(4326) )  # Generate 30 random points within the bounding box random_points <- st_as_sf(     data.frame(         id = 1:30,         lon = runif(30, bbox[\"xmin\"], bbox[\"xmax\"]),         lat = runif(30, bbox[\"ymin\"], bbox[\"ymax\"])     ),     coords = c(\"lon\", \"lat\"),     crs = 4326 )  # Assign random icons icons <- c(\"music\", \"bar\", \"theatre\", \"bicycle\") random_points <- random_points |>     mutate(icon = sample(icons, n(), replace = TRUE))  # Map with icons mapboxgl(style = mapbox_style(\"light\")) |>     fit_bounds(random_points, animate = FALSE) |>     add_symbol_layer(         id = \"points-of-interest\",         source = random_points,         icon_image = c(\"get\", \"icon\"),         icon_allow_overlap = TRUE,         tooltip = \"icon\"     ) } # }"},{"path":"https://walker-data.com/mapgl/reference/add_vector_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a vector tile source to a Mapbox GL or Maplibre GL map — add_vector_source","title":"Add a vector tile source to a Mapbox GL or Maplibre GL map — add_vector_source","text":"Add vector tile source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_vector_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a vector tile source to a Mapbox GL or Maplibre GL map — add_vector_source","text":"","code":"add_vector_source(map, id, url)"},{"path":"https://walker-data.com/mapgl/reference/add_vector_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a vector tile source to a Mapbox GL or Maplibre GL map — add_vector_source","text":"map map object created mapboxgl maplibre function. id unique ID source. url URL pointing vector tile source.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_vector_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a vector tile source to a Mapbox GL or Maplibre GL map — add_vector_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_video_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a video source to a Mapbox GL or Maplibre GL map — add_video_source","title":"Add a video source to a Mapbox GL or Maplibre GL map — add_video_source","text":"Add video source Mapbox GL Maplibre GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/add_video_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a video source to a Mapbox GL or Maplibre GL map — add_video_source","text":"","code":"add_video_source(map, id, urls, coordinates)"},{"path":"https://walker-data.com/mapgl/reference/add_video_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a video source to a Mapbox GL or Maplibre GL map — add_video_source","text":"map map object created mapboxgl maplibre function. id unique ID source. urls vector URLs pointing video sources. coordinates list coordinates specifying video corners clockwise order: top left, top right, bottom right, bottom left.","code":""},{"path":"https://walker-data.com/mapgl/reference/add_video_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a video source to a Mapbox GL or Maplibre GL map — add_video_source","text":"modified map object new source added.","code":""},{"path":"https://walker-data.com/mapgl/reference/carto_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CARTO Style URL — carto_style","title":"Get CARTO Style URL — carto_style","text":"Get CARTO Style URL","code":""},{"path":"https://walker-data.com/mapgl/reference/carto_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CARTO Style URL — carto_style","text":"","code":"carto_style(style_name)"},{"path":"https://walker-data.com/mapgl/reference/carto_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CARTO Style URL — carto_style","text":"style_name name style (e.g., \"voyager\", \"positron\", \"dark-matter\").","code":""},{"path":"https://walker-data.com/mapgl/reference/carto_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CARTO Style URL — carto_style","text":"style URL corresponding given style name.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_controls.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear all controls from a Mapbox GL or Maplibre GL map in a Shiny app — clear_controls","title":"Clear all controls from a Mapbox GL or Maplibre GL map in a Shiny app — clear_controls","text":"Clear controls Mapbox GL Maplibre GL map Shiny app","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear all controls from a Mapbox GL or Maplibre GL map in a Shiny app — clear_controls","text":"","code":"clear_controls(map)"},{"path":"https://walker-data.com/mapgl/reference/clear_controls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear all controls from a Mapbox GL or Maplibre GL map in a Shiny app — clear_controls","text":"map map object created mapboxgl maplibre function.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_controls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear all controls from a Mapbox GL or Maplibre GL map in a Shiny app — clear_controls","text":"modified map object controls removed.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear a layer from a map using a proxy — clear_layer","title":"Clear a layer from a map using a proxy — clear_layer","text":"function allows layer removed existing Mapbox GL map using proxy object.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear a layer from a map using a proxy — clear_layer","text":"","code":"clear_layer(proxy, layer_id)"},{"path":"https://walker-data.com/mapgl/reference/clear_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear a layer from a map using a proxy — clear_layer","text":"proxy proxy object created mapboxgl_proxy maplibre_proxy. layer_id ID layer removed.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear a layer from a map using a proxy — clear_layer","text":"updated proxy object.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear legend from a map in a proxy session — clear_legend","title":"Clear legend from a map in a proxy session — clear_legend","text":"Clear legend map proxy session","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear legend from a map in a proxy session — clear_legend","text":"","code":"clear_legend(map)"},{"path":"https://walker-data.com/mapgl/reference/clear_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear legend from a map in a proxy session — clear_legend","text":"map map object created mapboxgl_proxy maplibre_proxy function.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear legend from a map in a proxy session — clear_legend","text":"updated map object legend cleared.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear markers from a map in a Shiny session — clear_markers","title":"Clear markers from a map in a Shiny session — clear_markers","text":"Clear markers map Shiny session","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear markers from a map in a Shiny session — clear_markers","text":"","code":"clear_markers(map)"},{"path":"https://walker-data.com/mapgl/reference/clear_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear markers from a map in a Shiny session — clear_markers","text":"map map object created mapboxgl_proxy maplibre_proxy function.","code":""},{"path":"https://walker-data.com/mapgl/reference/clear_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear markers from a map in a Shiny session — clear_markers","text":"modified map object markers cleared.","code":""},{"path":"https://walker-data.com/mapgl/reference/cluster_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare cluster options for circle layers — cluster_options","title":"Prepare cluster options for circle layers — cluster_options","text":"function creates list options clustering circle layers.","code":""},{"path":"https://walker-data.com/mapgl/reference/cluster_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare cluster options for circle layers — cluster_options","text":"","code":"cluster_options(   max_zoom = 14,   cluster_radius = 50,   color_stops = c(\"#51bbd6\", \"#f1f075\", \"#f28cb1\"),   radius_stops = c(20, 30, 40),   count_stops = c(0, 100, 750),   circle_blur = NULL,   circle_opacity = NULL,   circle_stroke_color = NULL,   circle_stroke_opacity = NULL,   circle_stroke_width = NULL )"},{"path":"https://walker-data.com/mapgl/reference/cluster_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare cluster options for circle layers — cluster_options","text":"max_zoom maximum zoom level cluster points. cluster_radius radius cluster clustering points. color_stops vector colors circle color step expression. radius_stops vector radii circle radius step expression. count_stops vector point counts color radius step expressions. circle_blur Amount blur circle. circle_opacity opacity circle. circle_stroke_color color circle's stroke. circle_stroke_opacity opacity circle's stroke. circle_stroke_width width circle's stroke.","code":""},{"path":"https://walker-data.com/mapgl/reference/cluster_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare cluster options for circle layers — cluster_options","text":"list cluster options.","code":""},{"path":"https://walker-data.com/mapgl/reference/cluster_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare cluster options for circle layers — cluster_options","text":"","code":"cluster_options(     max_zoom = 14,     cluster_radius = 50,     color_stops = c(\"#51bbd6\", \"#f1f075\", \"#f28cb1\"),     radius_stops = c(20, 30, 40),     count_stops = c(0, 100, 750),     circle_blur = 1,     circle_opacity = 0.8,     circle_stroke_color = \"#ffffff\",     circle_stroke_width = 2 ) #> $max_zoom #> [1] 14 #>  #> $cluster_radius #> [1] 50 #>  #> $color_stops #> [1] \"#51bbd6\" \"#f1f075\" \"#f28cb1\" #>  #> $radius_stops #> [1] 20 30 40 #>  #> $count_stops #> [1]   0 100 750 #>  #> $circle_blur #> [1] 1 #>  #> $circle_opacity #> [1] 0.8 #>  #> $circle_stroke_color #> [1] \"#ffffff\" #>  #> $circle_stroke_opacity #> NULL #>  #> $circle_stroke_width #> [1] 2 #>"},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Compare slider widget — compare","title":"Create a Compare slider widget — compare","text":"function creates comparison view two Mapbox GL Maplibre GL maps, allowing users swipe two maps compare different styles data layers.","code":""},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Compare slider widget — compare","text":"","code":"compare(   map1,   map2,   width = \"100%\",   height = NULL,   elementId = NULL,   mousemove = FALSE,   orientation = \"vertical\" )"},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Compare slider widget — compare","text":"map1 mapboxgl maplibre object representing first map. map2 mapboxgl maplibre object representing second map. width Width map container. height Height map container. elementId optional string specifying ID container comparison. NULL, unique ID generated. mousemove logical value indicating whether enable swiping cursor movement (rather clicked). orientation string specifying orientation swiper, either \"horizontal\" \"vertical\".","code":""},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Compare slider widget — compare","text":"comparison widget.","code":""},{"path":"https://walker-data.com/mapgl/reference/compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Compare slider widget — compare","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  library(mapgl)  m1 <- mapboxgl(style = mapbox_style(\"light\"))  m2 <- mapboxgl(style = mapbox_style(\"dark\"))  compare(m1, m2) } # }"},{"path":"https://walker-data.com/mapgl/reference/ease_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Ease to a given view — ease_to","title":"Ease to a given view — ease_to","text":"Ease given view","code":""},{"path":"https://walker-data.com/mapgl/reference/ease_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ease to a given view — ease_to","text":"","code":"ease_to(map, center, zoom = NULL, ...)"},{"path":"https://walker-data.com/mapgl/reference/ease_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ease to a given view — ease_to","text":"map map object created mapboxgl maplibre function proxy object. center numeric vector length 2 specifying target center map (longitude, latitude). zoom target zoom level. ... Additional named arguments easing view.","code":""},{"path":"https://walker-data.com/mapgl/reference/ease_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ease to a given view — ease_to","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/fit_bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the map to a bounding box — fit_bounds","title":"Fit the map to a bounding box — fit_bounds","text":"Fit map bounding box","code":""},{"path":"https://walker-data.com/mapgl/reference/fit_bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the map to a bounding box — fit_bounds","text":"","code":"fit_bounds(map, bbox, animate = FALSE, ...)"},{"path":"https://walker-data.com/mapgl/reference/fit_bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the map to a bounding box — fit_bounds","text":"map map object created mapboxgl maplibre function proxy object. bbox bounding box specified numeric vector length 4 (minLng, minLat, maxLng, maxLat), sf object bounding box calculated. animate logical value indicating whether animate transition new bounds. Defaults FALSE. ... Additional named arguments fitting bounds.","code":""},{"path":"https://walker-data.com/mapgl/reference/fit_bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the map to a bounding box — fit_bounds","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/fly_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Fly to a given view — fly_to","title":"Fly to a given view — fly_to","text":"Fly given view","code":""},{"path":"https://walker-data.com/mapgl/reference/fly_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fly to a given view — fly_to","text":"","code":"fly_to(map, center, zoom = NULL, ...)"},{"path":"https://walker-data.com/mapgl/reference/fly_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fly to a given view — fly_to","text":"map map object created mapboxgl maplibre function proxy object. center numeric vector length 2 specifying target center map (longitude, latitude). zoom target zoom level. ... Additional named arguments flying view.","code":""},{"path":"https://walker-data.com/mapgl/reference/fly_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fly to a given view — fly_to","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/get_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Get column or property for use in mapping — get_column","title":"Get column or property for use in mapping — get_column","text":"function returns expression get specified column dataset (property layer).","code":""},{"path":"https://walker-data.com/mapgl/reference/get_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get column or property for use in mapping — get_column","text":"","code":"get_column(column)"},{"path":"https://walker-data.com/mapgl/reference/get_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get column or property for use in mapping — get_column","text":"column name column property get.","code":""},{"path":"https://walker-data.com/mapgl/reference/get_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get column or property for use in mapping — get_column","text":"list representing expression get column.","code":""},{"path":"https://walker-data.com/mapgl/reference/get_drawn_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Get drawn features from the map — get_drawn_features","title":"Get drawn features from the map — get_drawn_features","text":"Get drawn features map","code":""},{"path":"https://walker-data.com/mapgl/reference/get_drawn_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get drawn features from the map — get_drawn_features","text":"","code":"get_drawn_features(map)"},{"path":"https://walker-data.com/mapgl/reference/get_drawn_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get drawn features from the map — get_drawn_features","text":"map map object created mapboxgl function, mapboxgl proxy.","code":""},{"path":"https://walker-data.com/mapgl/reference/get_drawn_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get drawn features from the map — get_drawn_features","text":"sf object containing drawn features.","code":""},{"path":"https://walker-data.com/mapgl/reference/get_drawn_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get drawn features from the map — get_drawn_features","text":"","code":"if (FALSE) { # \\dontrun{ # In a Shiny application library(shiny) library(mapgl)  ui <- fluidPage(     mapboxglOutput(\"map\"),     actionButton(\"get_features\", \"Get Drawn Features\"),     verbatimTextOutput(\"feature_output\") )  server <- function(input, output, session) {     output$map <- renderMapboxgl({         mapboxgl(             style = mapbox_style(\"streets\"),             center = c(-74.50, 40),             zoom = 9         ) |>             add_draw_control()     })      observeEvent(input$get_features, {         drawn_features <- get_drawn_features(mapboxgl_proxy(\"map\"))         output$feature_output <- renderPrint({             print(drawn_features)         })     }) }  shinyApp(ui, server) } # }"},{"path":"https://walker-data.com/mapgl/reference/interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an interpolation expression — interpolate","title":"Create an interpolation expression — interpolate","text":"function generates interpolation expression can used style data.","code":""},{"path":"https://walker-data.com/mapgl/reference/interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an interpolation expression — interpolate","text":"","code":"interpolate(   column = NULL,   property = NULL,   type = \"linear\",   values,   stops,   na_color = NULL )"},{"path":"https://walker-data.com/mapgl/reference/interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an interpolation expression — interpolate","text":"column name column use interpolation. specified, property NULL. property name property use interpolation. specified, column NULL. type interpolation type. Can one \"linear\", c(\"exponential\", base) base specifies rate output increases, c(\"cubic-bezier\", x1, y1, x2, y2) define cubic bezier curve control points. values numeric vector values stops occur. stops vector corresponding stops (colors, sizes, etc.) interpolation. na_color color use missing values.  Mapbox GL JS defaults black supplied.","code":""},{"path":"https://walker-data.com/mapgl/reference/interpolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an interpolation expression — interpolate","text":"list representing interpolation expression.","code":""},{"path":"https://walker-data.com/mapgl/reference/interpolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an interpolation expression — interpolate","text":"","code":"interpolate(   column = \"estimate\",   type = \"linear\",   values = c(1000, 200000),   stops = c(\"#eff3ff\", \"#08519c\") ) #> [[1]] #> [1] \"interpolate\" #>  #> [[2]] #> [[2]][[1]] #> [1] \"linear\" #>  #>  #> [[3]] #> [[3]][[1]] #> [1] \"get\" #>  #> [[3]][[2]] #> [1] \"estimate\" #>  #>  #> [[4]] #> [1] 1000 #>  #> [[5]] #> [1] \"#eff3ff\" #>  #> [[6]] #> [1] 2e+05 #>  #> [[7]] #> [1] \"#08519c\" #>"},{"path":"https://walker-data.com/mapgl/reference/jump_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Jump to a given view — jump_to","title":"Jump to a given view — jump_to","text":"Jump given view","code":""},{"path":"https://walker-data.com/mapgl/reference/jump_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jump to a given view — jump_to","text":"","code":"jump_to(map, center, zoom = NULL, ...)"},{"path":"https://walker-data.com/mapgl/reference/jump_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jump to a given view — jump_to","text":"map map object created mapboxgl maplibre function proxy object. center numeric vector length 2 specifying target center map (longitude, latitude). zoom target zoom level. ... Additional named arguments jumping view.","code":""},{"path":"https://walker-data.com/mapgl/reference/jump_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jump to a given view — jump_to","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapbox_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Mapbox Style URL — mapbox_style","title":"Get Mapbox Style URL — mapbox_style","text":"Get Mapbox Style URL","code":""},{"path":"https://walker-data.com/mapgl/reference/mapbox_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Mapbox Style URL — mapbox_style","text":"","code":"mapbox_style(style_name)"},{"path":"https://walker-data.com/mapgl/reference/mapbox_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Mapbox Style URL — mapbox_style","text":"style_name name style (e.g., \"standard\", \"streets\", \"outdoors\", etc.).","code":""},{"path":"https://walker-data.com/mapgl/reference/mapbox_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Mapbox Style URL — mapbox_style","text":"style URL corresponding given style name.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Mapbox GL Map — mapboxgl","title":"Initialize a Mapbox GL Map — mapboxgl","text":"Initialize Mapbox GL Map","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Mapbox GL Map — mapboxgl","text":"","code":"mapboxgl(   style = NULL,   center = c(0, 0),   zoom = 0,   bearing = 0,   pitch = 0,   projection = \"globe\",   parallels = NULL,   access_token = NULL,   bounds = NULL,   width = \"100%\",   height = NULL,   ... )"},{"path":"https://walker-data.com/mapgl/reference/mapboxgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Mapbox GL Map — mapboxgl","text":"style Mapbox style use. center numeric vector length 2 specifying initial center map. zoom initial zoom level map. bearing initial bearing (rotation) map, degrees. pitch initial pitch (tilt) map, degrees. projection map projection use (e.g., \"mercator\", \"globe\"). parallels vector two numbers representing standard parellels projection.  available projection \"albers\" \"lambertConformalConic\". access_token Mapbox access token. bounds sf object bounding box fit map . width width output htmlwidget. height height output htmlwidget. ... Additional named parameters passed Mapbox GL map.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Mapbox GL Map — mapboxgl","text":"HTML widget Mapbox map.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a Mapbox GL Map — mapboxgl","text":"","code":"if (FALSE) { # \\dontrun{ mapboxgl(projection = \"globe\") } # }"},{"path":"https://walker-data.com/mapgl/reference/mapboxglOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Mapbox GL output element for Shiny — mapboxglOutput","title":"Create a Mapbox GL output element for Shiny — mapboxglOutput","text":"Create Mapbox GL output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxglOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Mapbox GL output element for Shiny — mapboxglOutput","text":"","code":"mapboxglOutput(outputId, width = \"100%\", height = \"400px\")"},{"path":"https://walker-data.com/mapgl/reference/mapboxglOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Mapbox GL output element for Shiny — mapboxglOutput","text":"outputId output variable read width width element height height element","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxglOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Mapbox GL output element for Shiny — mapboxglOutput","text":"Mapbox GL output element use Shiny UI","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a proxy object for a Mapbox GL map in Shiny — mapboxgl_proxy","title":"Create a proxy object for a Mapbox GL map in Shiny — mapboxgl_proxy","text":"function allows updates sent existing Mapbox GL map Shiny application without redrawing entire map.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a proxy object for a Mapbox GL map in Shiny — mapboxgl_proxy","text":"","code":"mapboxgl_proxy(mapId, session = shiny::getDefaultReactiveDomain())"},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a proxy object for a Mapbox GL map in Shiny — mapboxgl_proxy","text":"mapId ID map output element. session Shiny session object.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapboxgl_proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a proxy object for a Mapbox GL map in Shiny — mapboxgl_proxy","text":"proxy object Mapbox GL map.","code":""},{"path":"https://walker-data.com/mapgl/reference/mapgl-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mapgl: Interactive Maps with 'Mapbox GL JS' and 'MapLibre GL JS' — mapgl-package","title":"mapgl: Interactive Maps with 'Mapbox GL JS' and 'MapLibre GL JS' — mapgl-package","text":"Provides interface 'Mapbox GL JS' (https://docs.mapbox.com/mapbox-gl-js/guides) 'MapLibre GL JS' (https://maplibre.org/maplibre-gl-js/docs/) interactive mapping libraries help users create custom interactive maps R. Users can create interactive globe visualizations; layer 'sf' objects create filled maps, circle maps, 'heatmaps', three-dimensional graphics; customize map styles views. package also includes utilities use 'Mapbox' 'MapLibre' maps 'Shiny' web applications.","code":""},{"path":[]},{"path":"https://walker-data.com/mapgl/reference/mapgl-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mapgl: Interactive Maps with 'Mapbox GL JS' and 'MapLibre GL JS' — mapgl-package","text":"Maintainer: Kyle Walker kyle@walker-data.com","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Maplibre GL Map — maplibre","title":"Initialize a Maplibre GL Map — maplibre","text":"Initialize Maplibre GL Map","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Maplibre GL Map — maplibre","text":"","code":"maplibre(   style = carto_style(\"voyager\"),   center = c(0, 0),   zoom = 0,   bearing = 0,   pitch = 0,   bounds = NULL,   width = \"100%\",   height = NULL,   ... )"},{"path":"https://walker-data.com/mapgl/reference/maplibre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Maplibre GL Map — maplibre","text":"style style JSON use. center numeric vector length 2 specifying initial center map. zoom initial zoom level map. bearing initial bearing (rotation) map, degrees. pitch initial pitch (tilt) map, degrees. bounds sf object bounding box fit map . width width output htmlwidget. height height output htmlwidget. ... Additional named parameters passed Mapbox GL map.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Maplibre GL Map — maplibre","text":"HTML widget Mapbox map.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a Maplibre GL Map — maplibre","text":"","code":"if (FALSE) { # \\dontrun{ maplibre() } # }"},{"path":"https://walker-data.com/mapgl/reference/maplibreOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Maplibre GL output element for Shiny — maplibreOutput","title":"Create a Maplibre GL output element for Shiny — maplibreOutput","text":"Create Maplibre GL output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibreOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Maplibre GL output element for Shiny — maplibreOutput","text":"","code":"maplibreOutput(outputId, width = \"100%\", height = \"400px\")"},{"path":"https://walker-data.com/mapgl/reference/maplibreOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Maplibre GL output element for Shiny — maplibreOutput","text":"outputId output variable read width width element height height element","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibreOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Maplibre GL output element for Shiny — maplibreOutput","text":"Maplibre GL output element use Shiny UI","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a proxy object for a Maplibre GL map in Shiny — maplibre_proxy","title":"Create a proxy object for a Maplibre GL map in Shiny — maplibre_proxy","text":"function allows updates sent existing Maplibre GL map Shiny application without redrawing entire map.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a proxy object for a Maplibre GL map in Shiny — maplibre_proxy","text":"","code":"maplibre_proxy(mapId, session = shiny::getDefaultReactiveDomain())"},{"path":"https://walker-data.com/mapgl/reference/maplibre_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a proxy object for a Maplibre GL map in Shiny — maplibre_proxy","text":"mapId ID map output element. session Shiny session object.","code":""},{"path":"https://walker-data.com/mapgl/reference/maplibre_proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a proxy object for a Maplibre GL map in Shiny — maplibre_proxy","text":"proxy object Maplibre GL map.","code":""},{"path":"https://walker-data.com/mapgl/reference/maptiler_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Get MapTiler Style URL — maptiler_style","title":"Get MapTiler Style URL — maptiler_style","text":"Get MapTiler Style URL","code":""},{"path":"https://walker-data.com/mapgl/reference/maptiler_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get MapTiler Style URL — maptiler_style","text":"","code":"maptiler_style(style_name, api_key = NULL)"},{"path":"https://walker-data.com/mapgl/reference/maptiler_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get MapTiler Style URL — maptiler_style","text":"style_name name style (e.g., \"basic\", \"streets\", \"toner\", etc.). api_key MapTiler API key (required)","code":""},{"path":"https://walker-data.com/mapgl/reference/maptiler_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get MapTiler Style URL — maptiler_style","text":"style URL corresponding given style name.","code":""},{"path":"https://walker-data.com/mapgl/reference/match_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a match expression — match_expr","title":"Create a match expression — match_expr","text":"function generates match expression can used style data.","code":""},{"path":"https://walker-data.com/mapgl/reference/match_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a match expression — match_expr","text":"","code":"match_expr(column = NULL, property = NULL, values, stops, default = \"#cccccc\")"},{"path":"https://walker-data.com/mapgl/reference/match_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a match expression — match_expr","text":"column name column use match expression. specified, property NULL. property name property use match expression. specified, column NULL. values vector values match . stops vector corresponding stops (colors, etc.) matched values. default default value use matches found.","code":""},{"path":"https://walker-data.com/mapgl/reference/match_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a match expression — match_expr","text":"list representing match expression.","code":""},{"path":"https://walker-data.com/mapgl/reference/match_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a match expression — match_expr","text":"","code":"match_expr(   column = \"category\",   values = c(\"A\", \"B\", \"C\"),   stops = c(\"#ff0000\", \"#00ff00\", \"#0000ff\"),   default = \"#cccccc\" ) #> [[1]] #> [1] \"match\" #>  #> [[2]] #> [[2]][[1]] #> [1] \"get\" #>  #> [[2]][[2]] #> [1] \"category\" #>  #>  #> [[3]] #> [1] \"A\" #>  #> [[4]] #> [1] \"#ff0000\" #>  #> [[5]] #> [1] \"B\" #>  #> [[6]] #> [1] \"#00ff00\" #>  #> [[7]] #> [1] \"C\" #>  #> [[8]] #> [1] \"#0000ff\" #>  #> [[9]] #> [1] \"#cccccc\" #>"},{"path":"https://walker-data.com/mapgl/reference/renderMapboxgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Mapbox GL output element in Shiny — renderMapboxgl","title":"Render a Mapbox GL output element in Shiny — renderMapboxgl","text":"Render Mapbox GL output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMapboxgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Mapbox GL output element in Shiny — renderMapboxgl","text":"","code":"renderMapboxgl(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://walker-data.com/mapgl/reference/renderMapboxgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Mapbox GL output element in Shiny — renderMapboxgl","text":"expr expression generates Mapbox GL map env environment evaluate expr quoted expr quoted expression","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMapboxgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Mapbox GL output element in Shiny — renderMapboxgl","text":"rendered Mapbox GL map use Shiny server","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMaplibre.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Maplibre GL output element in Shiny — renderMaplibre","title":"Render a Maplibre GL output element in Shiny — renderMaplibre","text":"Render Maplibre GL output element Shiny","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMaplibre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Maplibre GL output element in Shiny — renderMaplibre","text":"","code":"renderMaplibre(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://walker-data.com/mapgl/reference/renderMaplibre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Maplibre GL output element in Shiny — renderMaplibre","text":"expr expression generates Maplibre GL map env environment evaluate expr quoted expr quoted expression","code":""},{"path":"https://walker-data.com/mapgl/reference/renderMaplibre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Maplibre GL output element in Shiny — renderMaplibre","text":"rendered Maplibre GL map use Shiny server","code":""},{"path":"https://walker-data.com/mapgl/reference/set_config_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a configuration property for a Mapbox GL map — set_config_property","title":"Set a configuration property for a Mapbox GL map — set_config_property","text":"Set configuration property Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/set_config_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a configuration property for a Mapbox GL map — set_config_property","text":"","code":"set_config_property(map, import_id, config_name, value)"},{"path":"https://walker-data.com/mapgl/reference/set_config_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a configuration property for a Mapbox GL map — set_config_property","text":"map map object created mapboxgl function proxy object defined mapboxgl_proxy(). import_id name imported style set config (e.g., 'basemap'). config_name name configuration property style. value value set configuration property.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_config_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a configuration property for a Mapbox GL map — set_config_property","text":"updated map object configuration property set.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a filter on a map layer — set_filter","title":"Set a filter on a map layer — set_filter","text":"function sets filter map layer, working regular map objects proxy objects.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a filter on a map layer — set_filter","text":"","code":"set_filter(map, layer_id, filter)"},{"path":"https://walker-data.com/mapgl/reference/set_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a filter on a map layer — set_filter","text":"map map object created mapboxgl maplibre function, proxy object. layer_id ID layer filter applied. filter filter expression apply.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a filter on a map layer — set_filter","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_fog.html","id":null,"dir":"Reference","previous_headings":"","what":"Set fog on a Mapbox GL map — set_fog","title":"Set fog on a Mapbox GL map — set_fog","text":"Set fog Mapbox GL map","code":""},{"path":"https://walker-data.com/mapgl/reference/set_fog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set fog on a Mapbox GL map — set_fog","text":"","code":"set_fog(   map,   range = NULL,   color = NULL,   horizon_blend = NULL,   high_color = NULL,   space_color = NULL,   star_intensity = NULL )"},{"path":"https://walker-data.com/mapgl/reference/set_fog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set fog on a Mapbox GL map — set_fog","text":"map map object created mapboxgl function proxy object. range numeric vector length 2 defining minimum maximum range fog. color string specifying color fog. horizon_blend number 0 1 controlling blending fog horizon. high_color string specifying color fog higher elevations. space_color string specifying color fog space. star_intensity number 0 1 controlling intensity stars fog.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_fog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set fog on a Mapbox GL map — set_fog","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_layout_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a layout property on a map layer — set_layout_property","title":"Set a layout property on a map layer — set_layout_property","text":"Set layout property map layer","code":""},{"path":"https://walker-data.com/mapgl/reference/set_layout_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a layout property on a map layer — set_layout_property","text":"","code":"set_layout_property(map, layer, name, value)"},{"path":"https://walker-data.com/mapgl/reference/set_layout_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a layout property on a map layer — set_layout_property","text":"map map object created mapboxgl maplibre function, proxy object. layer ID layer update. name name layout property set. value value set property .","code":""},{"path":"https://walker-data.com/mapgl/reference/set_layout_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a layout property on a map layer — set_layout_property","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_paint_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a paint property on a map layer — set_paint_property","title":"Set a paint property on a map layer — set_paint_property","text":"Set paint property map layer","code":""},{"path":"https://walker-data.com/mapgl/reference/set_paint_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a paint property on a map layer — set_paint_property","text":"","code":"set_paint_property(map, layer, name, value)"},{"path":"https://walker-data.com/mapgl/reference/set_paint_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a paint property on a map layer — set_paint_property","text":"map map object created mapboxgl maplibre function, proxy object. layer ID layer update. name name paint property set. value value set property .","code":""},{"path":"https://walker-data.com/mapgl/reference/set_paint_property.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a paint property on a map layer — set_paint_property","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the style of a map — set_style","title":"Update the style of a map — set_style","text":"Update style map","code":""},{"path":"https://walker-data.com/mapgl/reference/set_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the style of a map — set_style","text":"","code":"set_style(map, style, config = NULL, diff = TRUE)"},{"path":"https://walker-data.com/mapgl/reference/set_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the style of a map — set_style","text":"map map object created mapboxgl maplibre function, proxy object. style new style URL applied map. config named list options passed style config. diff boolean attempts diff-based update rather re-drawing full style. available styles.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the style of a map — set_style","text":"modified map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the style of a map — set_style","text":"","code":"if (FALSE) { # \\dontrun{ map <- mapboxgl(   style = mapbox_style(\"streets\"),   center = c(-74.006, 40.7128),   zoom = 10,   access_token = \"your_mapbox_access_token\" )  # Update the map style in a Shiny app observeEvent(input$change_style, {   mapboxgl_proxy(\"map\", session) %>%     set_style(mapbox_style(\"dark\"), config = list(showLabels = FALSE), diff = TRUE) }) } # }"},{"path":"https://walker-data.com/mapgl/reference/set_terrain.html","id":null,"dir":"Reference","previous_headings":"","what":"Set terrain properties on a map — set_terrain","title":"Set terrain properties on a map — set_terrain","text":"Set terrain properties map","code":""},{"path":"https://walker-data.com/mapgl/reference/set_terrain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set terrain properties on a map — set_terrain","text":"","code":"set_terrain(map, source, exaggeration = 1)"},{"path":"https://walker-data.com/mapgl/reference/set_terrain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set terrain properties on a map — set_terrain","text":"map map object created mapboxgl maplibre functions. source ID raster DEM source. exaggeration terrain exaggeration factor.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_terrain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set terrain properties on a map — set_terrain","text":"modified map object terrain settings applied.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_terrain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set terrain properties on a map — set_terrain","text":"","code":"if (FALSE) { # \\dontrun{ library(mapgl)  mapboxgl(   style = mapbox_style(\"standard-satellite\"),   center = c(-114.26608, 32.7213),   zoom = 14,   pitch = 80,   bearing = 41 ) |>   add_raster_dem_source(     id = \"mapbox-dem\",     url = \"mapbox://mapbox.mapbox-terrain-dem-v1\",     tileSize = 512,     maxzoom = 14   ) |>   set_terrain(     source = \"mapbox-dem\",     exaggeration = 1.5   ) } # }"},{"path":"https://walker-data.com/mapgl/reference/set_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the map center and zoom level — set_view","title":"Set the map center and zoom level — set_view","text":"Set map center zoom level","code":""},{"path":"https://walker-data.com/mapgl/reference/set_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the map center and zoom level — set_view","text":"","code":"set_view(map, center, zoom)"},{"path":"https://walker-data.com/mapgl/reference/set_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the map center and zoom level — set_view","text":"map map object created mapboxgl maplibre function proxy object. center numeric vector length 2 specifying center map (longitude, latitude). zoom zoom level.","code":""},{"path":"https://walker-data.com/mapgl/reference/set_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the map center and zoom level — set_view","text":"updated map object.","code":""},{"path":"https://walker-data.com/mapgl/reference/step_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a step expression — step_expr","title":"Create a step expression — step_expr","text":"function generates step expression can used styles.","code":""},{"path":"https://walker-data.com/mapgl/reference/step_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a step expression — step_expr","text":"","code":"step_expr(column = NULL, property = NULL, base, values, stops, na_color = NULL)"},{"path":"https://walker-data.com/mapgl/reference/step_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a step expression — step_expr","text":"column name column use step expression. specified, property NULL. property name property use step expression. specified, column NULL. base base value use step expression. values numeric vector values steps occur. stops vector corresponding stops (colors, sizes, etc.) steps. na_color color use missing values.  Mapbox GL JS defaults black supplied.","code":""},{"path":"https://walker-data.com/mapgl/reference/step_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a step expression — step_expr","text":"list representing step expression.","code":""},{"path":"https://walker-data.com/mapgl/reference/step_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a step expression — step_expr","text":"","code":"step_expr(   column = \"value\",   base = \"#ffffff\",   values = c(1000, 5000, 10000),   stops = c(\"#ff0000\", \"#00ff00\", \"#0000ff\") ) #> [[1]] #> [1] \"step\" #>  #> [[2]] #> [[2]][[1]] #> [1] \"get\" #>  #> [[2]][[2]] #> [1] \"value\" #>  #>  #> [[3]] #> [1] \"#ffffff\" #>  #> [[4]] #> [1] 1000 #>  #> [[5]] #> [1] \"#ff0000\" #>  #> [[6]] #> [1] 5000 #>  #> [[7]] #> [1] \"#00ff00\" #>  #> [[8]] #> [1] 10000 #>  #> [[9]] #> [1] \"#0000ff\" #>"},{"path":"https://walker-data.com/mapgl/news/index.html","id":"mapgl-013","dir":"Changelog","previous_headings":"","what":"mapgl 0.1.3","title":"mapgl 0.1.3","text":"Geocoding support Mapbox MapLibre maps added add_geocoder_control() Freehand draw support draw toolbar add_draw_control(freehand = TRUE) “reset view” control available add_reset_control() Circle clustering streamlined cluster_options() function, used cluster_options argument add_circle_layer() add_symbol_layer() Various bug fixes performance improvements.","code":""},{"path":"https://walker-data.com/mapgl/news/index.html","id":"mapgl-010","dir":"Changelog","previous_headings":"","what":"mapgl 0.1.0","title":"mapgl 0.1.0","text":"Initial release.","code":""}]
